name: Django CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"


jobs:
  tests_and_lint:

    runs-on: ubuntu-latest

    env:
      DJANGO_ENV: development
      SECRET_KEY: secret_key
      DEBUG: 'True'
      SESSION_COOKIE_SECURE: 'False'
      CSRF_COOKIE_SECURE: 'False'
      SECURE_SSL_REDIRECT: 'False'
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: github_actions
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      CORS_ALLOWED_ORIGINS: 'http://localhost:3000'
      OIDC_RP_CLIENT_ID: "test"
      OIDC_RP_CLIENT_SECRET: "test_secret"
      OIDC_OP_AUTHORIZATION_ENDPOINT: ""
      OIDC_OP_TOKEN_ENDPOINT: ""
      OIDC_OP_USER_ENDPOINT: ""
      OIDC_OP_JWKS_ENDPOINT: ""

    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.12 ]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
          POSTGRES_HOST: localhost
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis
        # Set health checks to wait until redis has started
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          # When dealing with pull requests, this ensures that we check out the
          # actual commit and not the merge commit from the PR.
          # See: https://github.com/actions/checkout#Checkout-pull-request-HEAD-commit-instead-of-merge-commit
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Tests
        run: |
          python manage.py test
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Lint code with Ruff
        run: ruff check --output-format=github --target-version=py39

      - name: Check code formatting with Ruff
        run: ruff format --diff --target-version=py39

      - name: Bandit security check
        run: bandit -r .

  build:
    needs: tests_and_lint

    runs-on: ubuntu-latest
    # Only build from the default branch. (see https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context)
    if: github.ref_name == github.event.repository.default_branch

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/simplewishlist-backend:latest
          file: ./Dockerfile.production

  deploy:
    needs: [tests_and_lint, build]

    runs-on: ubuntu-latest

    # Only deploy from the default branch.
    if: github.ref_name == github.event.repository.default_branch

    steps:
      - uses: actions/checkout@v4

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
          sudo chmod 600 ~/.ssh/private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_DEPLOY_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}

      - name: Deploy
        # We just need to ssh into the server to trigger the deployment
        run: |
          ssh -T -i ~/.ssh/private.key $SSH_USER@$SSH_HOST -p $SSH_PORT
        env:
          SSH_USER: ${{secrets.SSH_USER}}
          SSH_HOST: ${{secrets.SSH_HOST}}
          SSH_PORT: ${{secrets.SSH_PORT}}
